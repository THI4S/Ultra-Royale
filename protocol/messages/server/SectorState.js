const Processor = require('../../processor')
const cardUtils = require('../../../utils/cardUtils');
const utils = require('../../../utils');

module.exports = class SectorState extends Processor {
    constructor(device, device2) {
        super()
        if (device2) {
            this.device2 = device2
        }
        this.device = device
        this.code = 21873
        this.version = 1
    }

    encode() {
        if (!this.device2) {
            this.data.writeRrsInt32(0);//Is compressed
            this.data.append(Buffer.from('012A02020100017F7F7F7F0000000000000100000000000000000000000000000800000000000000000100000000000000000000000102', 'hex'))
            //High and low id repeated 3 times
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeIString(this.device.player.name);
            let currentDeck = this.device.player.decks[this.device.player.selectedDeck];
            this.data.append(Buffer.from('199F368606A31D000000000029000000000008130501BB97040502AB10050302050400050C8C14050D00050E00050F98110516B21105199487979707051A04051C00051D8A88D5440521000522000523000524000526000525000000000505068F3C05078D0F050B2905140B051B0B011A320C00000B0202B8DB010000000869205061677572699201BE5193080094249023019F0318000000002B00217F0B0007037BF994EABEEA090229017F7F00', 'hex'));
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.append(Buffer.fromhex'));
            this.data.writeRrsInt32(999);//Starting Elixir
            this.data.append(Buffer.from('00000000007F7F7F7F7F7F7F7F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC2F00A22B00AC2F00A22B00A84400984B0000000000A40100000000A40100000000A40100000000A40100000000A40100000000A401', 'hex'));
            //-- Trainer's deck --//
            this.data.append(Buffer.from('FF01190B8F010B090B2102200B140A10051F0A00', 'hex'));//190B8F010B090B2102200B140A10051F0A00', 'hex'));
            this.data.append(Buffer.from('FF01', 'hex'));
            currentDeck.forEach(cardSCID => {
                let card = utils.findObjectByKey(this.device.player.cards, 'ID', cardUtils.SCIDtoInstanceID(cardSCID));

                this.data.writeRrsInt32(card.ID);
                this.data.writeRrsInt32(card.level);
            });
            this.data.writeRrsInt32(0);
            this.data.append(Buffer.from('05060202040201030000000000000000000204000C00000093E5BFB00D00', 'hex'));
        }
        else {
            this.data.writeRrsInt32(0);//Is compressed
            this.data.append(Buffer.from('012A02020001020100000000155449445F4C41444445525F51554553545F504C4159000000000A0101000001010001', 'hex'));
            //Home player's data
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeIString(this.device.player.name);
            this.data.writeRrsInt32(5); //Unk
            this.data.writeRrsInt32(this.device.player.trophies); //Home player's trophies
            this.data.append(Buffer.from('001D0000000000290000000000080A0501BB02050206050302050400050D00050E00051C00051D8888D5440526000525000000000405061E050701050B29051B01000000010002000001017F050100000102', 'hex'));
            this.data.writeRrsInt32(this.device2.player.highID);
            this.data.writeRrsInt32(this.device2.player.lowID);
            this.data.writeRrsInt32(this.device2.player.highID);
            this.data.writeRrsInt32(this.device2.player.lowID);
            this.data.writeRrsInt32(this.device2.player.highID);
            this.data.writeRrsInt32(this.device2.player.lowID);
            this.data.writeIString(this.device2.player.name);
            this.data.writeRrsInt32(5); //Unk
            this.data.writeRrsInt32(this.device2.player.trophies); //Opponent's trophies
            this.data.append(Buffer.from('00000000000000290000000000080905019503050206050302050D00050E05051D8688D544052500050400051C0000000004050B29051B0105070105061E00000001000200000101010500000001002B0021ABCDD2AB0B0B000DB01BA3BBECAEFD0C030002', 'hex'));
            this.data.writeRrsInt32(this.device.player.highID);
            this.data.writeRrsInt32(this.device.player.lowID);
            this.data.writeRrsInt32(0);//Unk
            this.data.writeRrsInt32(this.device2.player.highID);
            this.data.writeRrsInt32(this.device2.player.lowID);
            this.data.append(Buffer.fromhex')); 
            //this.data.append(Buffer.fromhex'));
        
        }
    }
}

module.exports.code = 21873
